Задание №1

Создать структуру для хранения Номеров паспортов и Фамилий сотрудников организации.
123456 Иванов
321456 Васильев
234561 Петрова
234432 Иванов
654321 Петрова
345678 Иванов
Вывести данные по сотрудникам с фамилией Иванов.

Задание №2

Написать программу, определяющую правильность расстановки скобок в выражении.
Пример 1: a+(d*3) - истина
Пример 2: [a+(1*3) - ложь
Пример 3: [6+(3*3)] - истина
Пример 4: {a}[+]{(d*3)} - истина
Пример 5: <{a}+{(d*3)}> - истина
Пример 6: {a+]}{(d*3)} - ложь



Задание №3

Написать метод, который переведет число из римского формата записи в арабский. 
Например, MMXXII = 2022
http://graecolatini.bsu.by/htm-different/num-converter-roman.htm 



Задание №4 

Написать метод, который переведёт данное целое число в римский формат.




Задание №5 (доп)

Взять набор строк, например,Мороз и солнце день чудесный Еще ты дремлешь друг прелестный Пора красавица проснись.
Написать метод, который отсортирует эти строки по длине с помощью TreeMap. Строки с одинаковой длиной не должны “потеряться”.

Задание №6 (доп)
Шахматную доску размером NxN обойти конём так, чтобы фигура в каждой клетке была строго один раз.




ДЗ

1.Реализуйте структуру телефонной книги с помощью HashMap, учитывая, что 1 человек может иметь несколько телефонов.
2. Пусть дан список сотрудников:

Иван Иванов
Светлана Петрова
Кристина Белова
Анна Мусина
Анна Крутова
Иван Юрин
Петр Лыков
Павел Чернов
Петр Чернышов
Мария Федорова
Марина Светлова
Мария Савина
Мария Рыкова
Марина Лугова
Анна Владимирова
Иван Мечников
Петр Петин
Иван Ежов


Написать программу, которая найдет и выведет повторяющиеся имена с количеством повторений. Отсортировать по убыванию популярности.
3.* Реализовать алгоритм пирамидальной сортировки (HeapSort).
4.* На шахматной доске расставить 8 ферзей так, чтобы они не били друг друга.
https://habr.com/ru/post/343738/




Пример реализации проверки скобочной записи


import java.util.EmptyStackException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

public class task0 {

    private static Map<Character, Character> CLOSE_TO_OPEN;
    private static Set<Character> OPENERS;
    static {
        CLOSE_TO_OPEN = new HashMap<>();
        CLOSE_TO_OPEN.put(')', '(');
        CLOSE_TO_OPEN.put(']', '[');
        CLOSE_TO_OPEN.put('}', '{');
        OPENERS = new HashSet<>(CLOSE_TO_OPEN.values());
    }

    public static void main(String[] args) {
        System.out.println(checkBraces("[(()])]"));
    }

 
    public static boolean checkBraces (String str) {
        Stack<Character> stack = new Stack<>();
        for (Character c : str.toCharArray()) {
    
            // Скобка открылась, помещаем в стек
            if (OPENERS.contains(c)) {
                stack.push(c);
            } 
            // Скобка закрылась, проверям, какая была перед ней открывающаяся
            else if (CLOSE_TO_OPEN.containsKey(c)) {
                try {
                    Character opener = stack.pop();
                    // Не совпадают
                    if (!CLOSE_TO_OPEN.get(c).equals(opener)) {
                        return false;
                    }
                } 
                // Если в стеке не нашли открывающуюся, значит это лишняя закрывающаяся
                catch (EmptyStackException ignore) {
                    return false;
                }
            }
        }
    
        // Если стек не пуст в конце прохода, 
        // то есть лишние открывающиеся
        if (!stack.isEmpty()) {
            return false;
        }
        return true;
    } 
}